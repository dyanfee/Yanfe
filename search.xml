<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[seaborn学习笔记]]></title>
    <url>%2F2019%2F04%2F17%2Fseaborn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[seaborn简单使用导入123456789101112131415import seaborn as sns# 默认风格sns.set()# 五种风格 darkgrid whitegrid dark white tickssns.set_style('darkgrid')# offset 到轴线的距离 left 去掉左边的轴 right top bottomsns.despine(offset = 10,left = True) # 去掉某些轴# paper talk poster notebook 绘制内容风格sns.set_context("paper"，font_scale,rc=&#123;"lines.linewidth":2.5&#125;)# bins 直方图的个数sns.distplot(data,bins,kds=False) #画图sns.jointplot(x,y,data) # 绘制散点图和单变量直方图 颜色1234567891011121314151617181920212223# 调色板 deep muted pastel bright dark colorblindcolor_palette()set_palette()# 调色板输出8种颜色 均分sns.palplot(sns.color_palette('hls',8))# 调整亮度和饱和度 l=lightness s饱和度 saturationsns.palplot(sns.hls_palette(8,l=3,s=9))# 深浅 sns.palplot(sns.color_paltte("Paired"),8)# xkcd 指定固定颜色# sns.xkcd_rgb['pale red']# 连续颜色 产生由浅到深的颜色 渐变翻转加_r 如BuGn_r n指定产生几种颜色 ‘cubehelix’线性变换sns.palplot(sns.color_palette("Blues",n))# n产生几种颜色 start开始颜色 rot变换度sns.paplot(sns.cubehelix_palette(n,start,rot))# 指定颜色渐变 由浅到深 dark_palette() 由深到浅 reverse 翻转sns.palplot(sns.light_palette('green',reverse)) 使用1234567891011121314151617181920import seaborn as snsimport numpy as npimport matplotlib.pyplot as pltdef sinplot(flip=1): # 0到14之间取100个点 x = np.linspace(0, 14, 100) style = ['darkgrid', 'whitegrid', 'dark', 'white', 'ticks'] for j in range(5): plt.subplot(3, 2, j+1) for i in range(1, 7): plt.plot(x, np.sin(x+i*.5)*(7-i)*flip) sns.set_style(style[j]) plt.title = style[j]sinplot()plt.show() 散点图12345678910111213141516import seaborn as snsimport numpy as npimport matplotlib.pyplot as pltimport pandas as pdmean, cov = [0, 1], [(1, 0.5), (.5, 1)]# 生成200个数据 两组data = np.random.multivariate_normal(mean, cov, 200)data = pd.DataFrame(data, columns=["x", "y"])print(data)sns.jointplot(x="x", y="y", data=data)# kind 指定点的样式 hex六边形# sns.jointplot(x="x", y="y",kind="hex", data=data)plt.show() 回归1234567# 回归分析regplot()lmplot()# regplot画回归 x_jitter抖动sns.regplot(x,y,data,x_jitter) 123456789101112131415161718import seaborn as snsimport numpy as npimport matplotlib.pyplot as pltimport pandas as pd# 自带数据集# iris = sns.load_dataset("tips")# iris.head()mean, cov = [0, 1], [(1, 0.5), (.5, 1)]# 生成200个数据 两组data = np.random.multivariate_normal(mean, cov, 200)data = pd.DataFrame(data, columns=["x", "y"])print(data)sns.regplot(x="x", y="y", data = data)plt.show()]]></content>
  </entry>
  <entry>
    <title><![CDATA[matplotlib学习笔记]]></title>
    <url>%2F2019%2F04%2F15%2Fmatplotlib%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[matplotlib简单使用导入12345678910111213141516import matplotlib.pyplot as pltplt.plot() #绘制图表plt.show() #显示plt.xticks(rotation=45) #对x轴的值旋转45度 plt.xlabel(name) #对x轴加标签plt.ylabel(name) #对y轴加标签plt.title(name) #表名plt.add_subplot(4,3,x) #创建多个图表 x指定图表的位置 4行3列plt.figure(figsize=(width,height)) #改表图表的宽高plt.legend(loc) #绘制说明plt.tick_params(bottom,top,left,right='off') #设置图像显示刻度 绘制柱状图1234567891011121314151617181920212223242526272829import matplotlib.pyplot as pltimport pandas as pdfrom numpy import arange# data = pd.DataFrame(&#123;'Name':[4,4.5,4.3,3,3.7]&#125;)# 模拟数据data = pd.DataFrame(&#123;'First':[3],'Second':[4.5],'Third':[3.4],'Fourth':[4.4],'Fifth':[4.3]&#125;)# 列名num_cols = ['First','Second','Third','Fourth','Fifth']print(data)bar_heights = data.ix[0,num_cols].valuesprint(bar_heights)bar_positions = arange(5) + 0.5 print(bar_positions)fig,ax = plt.subplots()# 设置X的位置和y值高度 和列宽度ax.bar(bar_positions,bar_heights,0.4)# ax.barh(bar_positions,bar_heights,0.4) #绘制横向的图# ax.scatter(series,series) #绘制散点图plt.show()# 输出 Fifth First Fourth Second Third0 4.3 3 4.4 4.5 3.4[3. 4.5 3.4 4.4 4.3][0.5 1.5 2.5 3.5 4.5] 结果 散点图12345678910111213141516import matplotlib.pyplot as pltimport numpy as np# 模拟数据n = 500# 随机均值为0 方差2 的数据s1 = np.random.normal(0, 2, n)s2 = np.random.normal(3, 5, n)print(type(s1))fig, ax = plt.subplots()ax.scatter(s1, s2) # 绘制散点图plt.xlabel('s1')plt.ylabel('s2')plt.title('Scatter plot')plt.show() 结果 绘制频率柱状图123456789101112131415161718192021import matplotlib.pyplot as pltimport numpy as npimport pandas as pd# 模拟数据n = 1000# 随机均值为0 方差2 的数据s1 = np.round(np.abs(np.random.normal(10, 3, n)), decimals=1)data = pd.DataFrame()data['fir'] = s1# print(data)print(data['fir'].value_counts().sort_index())fig, ax = plt.subplots()ax.hist(data["fir"]) # 自动分跨度 频率柱状图# ax, ylim(0, 10)# 设置y的取值区间# ax.hist(data['fir'], bins=20) # 分为20个跨度# ax.hist(data['fir'], range(4, 5), bins=20) #取4到5之间的值分为20个跨度plt.xlabel('Values')plt.ylabel('Times')plt.title('Plot')plt.show() 结果 盒图12345678910111213141516171819202122import matplotlib.pyplot as pltimport numpy as npimport pandas as pd# 模拟数据n = 100# 随机均值为0 方差2 的数据s1 = np.round(np.abs(np.random.normal(10, 3, n)), decimals=1)s2 = np.round(np.abs(np.random.normal(10, 3, n)), decimals=1)s3 = np.round(np.abs(np.random.normal(10, 3, n)), decimals=1)data = pd.DataFrame()data['fir'] = s1data['sec'] = s2data['thi'] = s3num_cols = ["fir", "sec", "thi"]# print(data)fig, ax = plt.subplots()ax.boxplot(data[num_cols].values)ax.set_xticklabels(num_cols) # x轴的名称# ax.set_ylim(0, 10) # 设置y的取值区间plt.xlabel('Values')plt.title('Plot')plt.show() 结果 折线图12345678910111213141516171819202122232425262728import matplotlib.pyplot as pltimport numpy as npimport pandas as pd# 模拟数据n = 10# 随机均值为0 方差2 的数据s1 = np.round(np.abs(np.random.normal(10, 3, n)), decimals=1)s2 = np.round(np.abs(np.random.normal(10, 3, n)), decimals=1)s3 = np.round(np.abs(np.random.normal(10, 3, n)), decimals=1)data = pd.DataFrame()data['fir'] = s1data['sec'] = s2data['thi'] = s3num_cols = ["fir", "sec", "thi"]# print(data)# fig=plt.figure(figsize=(3,3))# ax = fig.add_subplot(1,1,1)fig, ax = plt.subplots()# c 指定颜色 linewidth指定线条宽度ax.plot(data["fir"], label='First', c=(0/255, 0/255, 0/255), linewidth=3)ax.plot(data['sec'], label='Sceond')ax.plot(data['thi'], label='Third')plt.xlabel('Values')plt.title('Plot')ax.legend(loc='upper right')plt.show() 结果]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pandas学习笔记]]></title>
    <url>%2F2019%2F04%2F14%2Fpandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[pandas简单使用pandas 数据读取 123456789101112import pandasdata = pandas.read_csv(path) #打开csv数据data.dtypes #内含数据类型data.head(num) #从头显示数据 num显示数据的条数data.tail(num) #从最后显示数据 data.columns #返回列名data.shape() #返回数据行列数data.loc[num] #返回某一条数据 num数据行数索引data.loc[start:end] #返回多条数数据data[row_name] #返回某一列 row_name列名 类型为Seriesdata[[name1,name2]] #返回多列pandas.isnull(data[row_name]) #返回列中每个值是否为缺失值 数据运算1234data[row_name].max() #返回某一列最大值data[row_name1]*data[row_name2] #两列元素对应相乘data[row_name]/1000 #列中每个元素都除1000data[row_name].mean() #求指定列的均值 数据排序12345data.sort_values(row_name,inplace=True,ascending = False) #按指定列进行排序 implace是否输出新的DataFrame ascending是否升序data.pivot_table(index,values,aggfunc) #对两列进行筛选计算 aggfunc默认求均值numpy.meandata.drapna(axis = 0,subset=[name1,name2]) #去掉列中存在缺失值的行data.reset_index(drop = True) #重新索引排序 drop是否去掉原来的索引 自定义函数1data.apply(func) #自定义函数 12# 设置索引data.set_index(name,drop=True) #将name列设置为索引 drop是否去掉空值 pandas.to_datetime() 将某列转为时间]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy学习笔记]]></title>
    <url>%2F2019%2F04%2F14%2Fnumpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[矩阵的读取numpy.getfromtxt(path,delimiter,dtype) 打开txt文件 类型为ndarray dtype指定数据类型 vector = numpy.array(list) 传入一维数组或– vector.shape vector 的行列值 vector.dtype vector 中每个元素的类型 vector.astype(type) 转换vector内值的类型 matrix.sum(axis=1) 对每行求和 axis=0 是对列求和 numpy.arange(15).reshape(3,5) 将一个一维数组转换为3行5列的二维数组 vector.ndim vector的维度 numpy.zeros((3,4)，dtype) 构造3行5列的空矩阵，dtype指定类型，numpy.ones 构造值为1 的矩阵 numpy.random.random((2,3)) 构造随机矩阵，范围为0-1 numpy.linspace(0,2*pi,100) 构造一个从0开始到2π，个数为100的矩阵 12345A = numpy.array([[2,3],[4,1]])B = numpy.array([[1,1],[3,1]])A*BA.dot(B)numpy.dot(A,B) A*B 两矩形对应位置相乘 A.dot(B) 或 numpy.dot(A,B) 矩阵点乘 12numpy.exp(B)numpy.sqrt(B) exp 表示e的B次幂 ，sqrt 求根号B 12345a = numpy.floor(10*numpy.random.random((3,4)))a.ravel()a.shape=(6,2) #将矩阵转为6×2的矩阵a.T #转置a.reshape(3,-1) #将矩阵转为3×n 的矩阵 n会自动计算 ravel() 将矩阵转为一维数组 矩阵的拼接操作123456a = numpy.floor(10*numpy.random.random((2,2)))b = numpy.floor(10*numpy.random.random((2,2)))#拼接操作numpy.hstack((a,b)) #横着拼numpy.vstack((a,b)) #竖着拼 12345678a = numpy.floor(10*numpy.random.random((2,12)))# 分割操作numpy.hsplit(a,3) #分割为3个矩阵 numpy.hsplit(a,(3,4)) # 对行的指定位置进行切分numpy.vsplit(a.T,3)numpy.vsplit(a.T,(3,4)) 矩阵复制操作 简单指向 123a = numpy.arange(12) b = a #将b指向a 浅复制 1c = a.view() #a与c的值是公用的 深复制 1d = a.copy() #完全复制 矩阵的排序12345data = numpy.sin(numpy.arange(20)).reshape(5,4)ind = data.argmax(axis=0) #返回每列最大值所在的行数data_max = data[ind,range(data.shape[1])] #返回每列最大值 12345a = numpy.array([[5,3,4],[1,2,1]])b = numpy.sort(a,axis=1) #对每行进行排序a = numpy.array([2,3,5,1])b = numpy.argsort(a) # 返回排序后的索引 矩阵扩展123a = numpy.arange(0,40,10)b = numpy.title(a,(2,3)) #行变为两倍 列变为两倍]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>numpy</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好！]]></title>
    <url>%2F2019%2F04%2F07%2F%E4%BD%A0%E5%A5%BD%EF%BC%81%2F</url>
    <content type="text"><![CDATA[后来的我们各自奔向远方 曾经以为日子很长，突然发现，时间过得飞快，在这个年龄，开始茫然！]]></content>
      <categories>
        <category>picture</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>picture</tag>
        <tag>test</tag>
        <tag>nodejs</tag>
        <tag>Typescript</tag>
      </tags>
  </entry>
</search>
